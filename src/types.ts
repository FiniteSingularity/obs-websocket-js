/**
 * This file is autogenerated by scripts/generate-obs-typings.js
 * To update this with latest changes do npm run generate:obs-types
 */
import {JsonArray, JsonObject, JsonValue} from 'type-fest';

export enum WebSocketOpCode {
/**
 * The initial message sent by obs-websocket to newly connected clients.
 *
 * Initial OBS Version: 5.0.0
 */
	Hello = 0,
	/**
	 * The message sent by a newly connected client to obs-websocket in response to a `Hello`.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Identify = 1,
	/**
	 * The response sent by obs-websocket to a client after it has successfully identified with obs-websocket.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Identified = 2,
	/**
	 * The message sent by an already-identified client to update identification parameters.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Reidentify = 3,
	/**
	 * The message sent by obs-websocket containing an event payload.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Event = 5,
	/**
	 * The message sent by a client to obs-websocket to perform a request.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Request = 6,
	/**
	 * The message sent by obs-websocket in response to a particular request from a client.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	RequestResponse = 7,
	/**
	 * The message sent by a client to obs-websocket to perform a batch of requests.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	RequestBatch = 8,
	/**
	 * The message sent by obs-websocket in response to a particular batch of requests from a client.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	RequestBatchResponse = 9,
}

/* eslint-disable no-bitwise, @typescript-eslint/prefer-literal-enum-member */
export enum EventSubscription {
/**
 * Subcription value used to disable all events.
 *
 * Initial OBS Version: 5.0.0
 */
	None = 0,
	/**
	 * Subscription value to receive events in the `General` category.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	General = (1 << 0),
	/**
	 * Subscription value to receive events in the `Config` category.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Config = (1 << 1),
	/**
	 * Subscription value to receive events in the `Scenes` category.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Scenes = (1 << 2),
	/**
	 * Subscription value to receive events in the `Inputs` category.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Inputs = (1 << 3),
	/**
	 * Subscription value to receive events in the `Transitions` category.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Transitions = (1 << 4),
	/**
	 * Subscription value to receive events in the `Filters` category.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Filters = (1 << 5),
	/**
	 * Subscription value to receive events in the `Outputs` category.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Outputs = (1 << 6),
	/**
	 * Subscription value to receive events in the `SceneItems` category.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	SceneItems = (1 << 7),
	/**
	 * Subscription value to receive events in the `MediaInputs` category.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	MediaInputs = (1 << 8),
	/**
	 * Subscription value to receive the `VendorEvent` event.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Vendors = (1 << 9),
	/**
	 * Helper to receive all non-high-volume events.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	All = (General | Config | Scenes | Inputs | Transitions | Filters | Outputs | SceneItems | MediaInputs | Vendors),
	/**
	 * Subscription value to receive the `InputVolumeMeters` high-volume event.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	InputVolumeMeters = (1 << 16),
	/**
	 * Subscription value to receive the `InputActiveStateChanged` high-volume event.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	InputActiveStateChanged = (1 << 17),
	/**
	 * Subscription value to receive the `InputShowStateChanged` high-volume event.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	InputShowStateChanged = (1 << 18),
	/**
	 * Subscription value to receive the `SceneItemTransformChanged` high-volume event.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	SceneItemTransformChanged = (1 << 19),
}
/* eslint-enable no-bitwise, @typescript-eslint/prefer-literal-enum-member */

export enum RequestBatchExecutionType {
/**
 * Not a request batch.
 *
 * Initial OBS Version: 5.0.0
 */
	None = -1,
	/**
	 * A request batch which processes all requests serially, as fast as possible.
	 *
	 * Note: To introduce artificial delay, use the `Sleep` request and the `sleepMillis` request field.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	SerialRealtime = 0,
	/**
	 * A request batch type which processes all requests serially, in sync with the graphics thread. Designed to provide high accuracy for animations.
	 *
	 * Note: To introduce artificial delay, use the `Sleep` request and the `sleepFrames` request field.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	SerialFrame = 1,
	/**
	 * A request batch type which processes all requests using all available threads in the thread pool.
	 *
	 * Note: This is mainly experimental, and only really shows its colors during requests which require lots of
	 * active processing, like `GetSourceScreenshot`.
	 *
	 * Initial OBS Version: 5.0.0
	 */
	Parallel = 2,
}

// WebSocket Message Types
export type IncomingMessage<Type = keyof IncomingMessageTypes> = Type extends keyof IncomingMessageTypes ? {
	op: Type;
	d: IncomingMessageTypes[Type];
} : never;

export type OutgoingMessage<Type = keyof OutgoingMessageTypes> = Type extends keyof OutgoingMessageTypes ? {
	op: Type;
	d: OutgoingMessageTypes[Type];
} : never;

export interface IncomingMessageTypes {
	/**
	 * Message sent from the server immediately on client connection. Contains authentication information if auth is required. Also contains RPC version for version negotiation.
	 */
	[WebSocketOpCode.Hello]: {
		/**
		 * Version number of obs-websocket
		 */
		obsWebSocketVersion: string;
		/**
		 * Version number which gets incremented on each breaking change to the obs-websocket protocol.
		 * It's usage in this context is to provide the current rpc version that the server would like to use.
		 */
		rpcVersion: number;
		/**
		 * Authentication challenge when password is required
		 */
		authentication?: {
			challenge: string;
			salt: string;
		};
	};
	/**
	 * The identify request was received and validated, and the connection is now ready for normal operation.
	 */
	[WebSocketOpCode.Identified]: {
		/**
		 * If rpc version negotiation succeeds, the server determines the RPC version to be used and gives it to the client
		 */
		negotiatedRpcVersion: number;
	};
	/**
	 * An event coming from OBS has occured. Eg scene switched, source muted.
	 */
	[WebSocketOpCode.Event]: EventMessage;
	/**
	 * obs-websocket is responding to a request coming from a client
	 */
	[WebSocketOpCode.RequestResponse]: ResponseMessage;
}

export interface OutgoingMessageTypes {
	/**
	 * Response to Hello message, should contain authentication string if authentication is required, along with PubSub subscriptions and other session parameters.
	 */
	[WebSocketOpCode.Identify]: {
		/**
		 * Version number that the client would like the obs-websocket server to use
		 */
		rpcVersion: number;
		/**
		 * Authentication challenge response
		 */
		authentication?: string;
		/**
		 * When `ignoreInvalidMessages` is true, the socket will not be closed for `WebSocketCloseCode`: `MessageDecodeError`, `UnknownOpCode`, or `MissingDataKey`. Instead, the message will be logged and ignored.
		 */
		ignoreInvalidMessages?: boolean;
		/**
		 * Bitmask of `EventSubscription` items to subscribe to events and event categories at will. By default, all event categories are subscribed, except for events marked as high volume. High volume events must be explicitly subscribed to.
		 */
		eventSubscriptions?: number;
	};
	/**
	 * Sent at any time after initial identification to update the provided session parameters.
	 */
	[WebSocketOpCode.Reidentify]: {
		/**
		 * When `ignoreInvalidMessages` is true, the socket will not be closed for `WebSocketCloseCode`: `MessageDecodeError`, `UnknownOpCode`, or `MissingDataKey`. Instead, the message will be logged and ignored.
		 */
		ignoreInvalidMessages?: boolean;
		/**
		 * Bitmask of `EventSubscription` items to subscribe to events and event categories at will. By default, all event categories are subscribed, except for events marked as high volume. High volume events must be explicitly subscribed to.
		 */
		eventSubscriptions?: number;
	};
	/**
	 * Client is making a request to obs-websocket. Eg get current scene, create source.
	 */
	[WebSocketOpCode.Request]: RequestMessage;
}

type EventMessage<T = keyof OBSEventTypes> = T extends keyof OBSEventTypes ? {
	eventType: T;
	/**
	 * The original intent required to be subscribed to in order to receive the event.
	 */
	eventIntent: number;
	eventData: OBSEventTypes[T];
} : never;

export type RequestMessage<T = keyof OBSRequestTypes> = T extends keyof OBSRequestTypes ? {
	requestType: T;
	requestId: string;
	requestData: OBSRequestTypes[T];
} : never;

export type ResponseMessage<T = keyof OBSResponseTypes> = T extends keyof OBSResponseTypes ? {
	requestType: T;
	requestId: string;
	requestStatus: {result: true; code: number} | {result: false; code: number; comment: string};
	responseData: OBSResponseTypes[T];
} : never;

// Events
export interface OBSEventTypes {
	CurrentSceneCollectionChanging: {
		/**
		 * Name of the current scene collection
		 */
		sceneCollectionName: string;
	};
	CurrentSceneCollectionChanged: {
		/**
		 * Name of the new scene collection
		 */
		sceneCollectionName: string;
	};
	SceneCollectionListChanged: {
		/**
		 * Updated list of scene collections
		 */
		sceneCollections: string[];
	};
	CurrentProfileChanging: {
		/**
		 * Name of the current profile
		 */
		profileName: string;
	};
	CurrentProfileChanged: {
		/**
		 * Name of the new profile
		 */
		profileName: string;
	};
	ProfileListChanged: {
		/**
		 * Updated list of profiles
		 */
		profiles: string[];
	};
	ExitStarted: undefined;
	StudioModeStateChanged: {
		/**
		 * True == Enabled, False == Disabled
		 */
		studioModeEnabled: boolean;
	};
	VendorEvent: {
		/**
		 * Name of the vendor emitting the event
		 */
		vendorName: string;
		/**
		 * Vendor-provided event typedef
		 */
		eventType: string;
		/**
		 * Vendor-provided event data. {} if event does not provide any data
		 */
		eventData: JsonObject;
	};
}

// Requests and Responses
export interface OBSRequestTypes {
	GetPersistentData: {
		/**
		 * The data realm to select. `OBS_WEBSOCKET_DATA_REALM_GLOBAL` or `OBS_WEBSOCKET_DATA_REALM_PROFILE`
		 */
		realm: string;
		/**
		 * The name of the slot to retrieve data from
		 */
		slotName: string;
	};
	SetPersistentData: {
		/**
		 * The data realm to select. `OBS_WEBSOCKET_DATA_REALM_GLOBAL` or `OBS_WEBSOCKET_DATA_REALM_PROFILE`
		 */
		realm: string;
		/**
		 * The name of the slot to retrieve data from
		 */
		slotName: string;
		/**
		 * The value to apply to the slot
		 */
		slotValue: JsonValue;
	};
	GetSceneCollectionList: undefined;
	SetCurrentSceneCollection: {
		/**
		 * Name of the scene collection to switch to
		 */
		sceneCollectionName: string;
	};
	CreateSceneCollection: {
		/**
		 * Name for the new scene collection
		 */
		sceneCollectionName: string;
	};
	GetProfileList: undefined;
	SetCurrentProfile: {
		/**
		 * Name of the profile to switch to
		 */
		profileName: string;
	};
	CreateProfile: {
		/**
		 * Name for the new profile
		 */
		profileName: string;
	};
	RemoveProfile: {
		/**
		 * Name of the profile to remove
		 */
		profileName: string;
	};
	GetProfileParameter: {
		/**
		 * Category of the parameter to get
		 */
		parameterCategory: string;
		/**
		 * Name of the parameter to get
		 */
		parameterName: string;
	};
	SetProfileParameter: {
		/**
		 * Category of the parameter to set
		 */
		parameterCategory: string;
		/**
		 * Name of the parameter to set
		 */
		parameterName: string;
		/**
		 * Value of the parameter to set. Use `null` to delete
		 */
		parameterValue: string;
	};
	GetVideoSettings: undefined;
	SetVideoSettings: {
		/**
		 * Numerator of the fractional FPS value
		 *
		 * @restrictions >= 1
		 * @defaultValue Not changed
		 */
		fpsNumerator?: number;
		/**
		 * Denominator of the fractional FPS value
		 *
		 * @restrictions >= 1
		 * @defaultValue Not changed
		 */
		fpsDenominator?: number;
		/**
		 * Width of the base (canvas) resolution in pixels
		 *
		 * @restrictions >= 1, <= 4096
		 * @defaultValue Not changed
		 */
		baseWidth?: number;
		/**
		 * Height of the base (canvas) resolution in pixels
		 *
		 * @restrictions >= 1, <= 4096
		 * @defaultValue Not changed
		 */
		baseHeight?: number;
		/**
		 * Width of the output resolution in pixels
		 *
		 * @restrictions >= 1, <= 4096
		 * @defaultValue Not changed
		 */
		outputWidth?: number;
		/**
		 * Height of the output resolution in pixels
		 *
		 * @restrictions >= 1, <= 4096
		 * @defaultValue Not changed
		 */
		outputHeight?: number;
	};
	GetStreamServiceSettings: undefined;
	SetStreamServiceSettings: {
		/**
		 * Type of stream service to apply. Example: `rtmp_common` or `rtmp_custom`
		 */
		streamServiceType: string;
		/**
		 * Settings to apply to the service
		 */
		streamServiceSettings: JsonObject;
	};
	GetVersion: undefined;
	GetStats: undefined;
	BroadcastCustomEvent: {
		/**
		 * Data payload to emit to all receivers
		 */
		eventData: JsonObject;
	};
	CallVendorRequest: {
		/**
		 * Name of the vendor to use
		 */
		vendorName: string;
		/**
		 * The request type to call
		 */
		requestType: string;
		/**
		 * Object containing appropriate request data
		 *
		 * @defaultValue {}
		 */
		requestData?: JsonObject;
	};
	GetHotkeyList: undefined;
	TriggerHotkeyByName: {
		/**
		 * Name of the hotkey to trigger
		 */
		hotkeyName: string;
	};
	TriggerHotkeyByKeySequence: {
		/**
		 * The OBS key ID to use. See https://github.com/obsproject/obs-studio/blob/master/libobs/obs-hotkeys.h
		 *
		 * @defaultValue Not pressed
		 */
		keyId?: string;
		/**
		 * Object containing key modifiers to apply
		 *
		 * @defaultValue Ignored
		 */
		keyModifiers?: {
			/**
			 * Press Shift
			 *
			 * @defaultValue Not pressed
			 */
			shift?: boolean;
			/**
			 * Press CTRL
			 *
			 * @defaultValue Not pressed
			 */
			control?: boolean;
			/**
			 * Press ALT
			 *
			 * @defaultValue Not pressed
			 */
			alt?: boolean;
			/**
			 * Press CMD (Mac)
			 *
			 * @defaultValue Not pressed
			 */
			command?: boolean;
		};
	};
	GetStudioModeEnabled: undefined;
	SetStudioModeEnabled: {
		/**
		 * True == Enabled, False == Disabled
		 */
		studioModeEnabled: boolean;
	};
	Sleep: {
		/**
		 * Number of milliseconds to sleep for (if `SERIAL_REALTIME` mode)
		 *
		 * @restrictions >= 0, <= 50000
		 */
		sleepMillis: number;
		/**
		 * Number of frames to sleep for (if `SERIAL_FRAME` mode)
		 *
		 * @restrictions >= 0, <= 10000
		 */
		sleepFrames: number;
	};
	GetInputList: {
		/**
		 * Restrict the array to only inputs of the specified kind
		 *
		 * @defaultValue All kinds included
		 */
		inputKind?: string;
	};
	GetInputKindList: {
		/**
		 * True == Return all kinds as unversioned, False == Return with version suffixes (if available)
		 *
		 * @defaultValue false
		 */
		unversioned?: boolean;
	};
	CreateInput: {
		/**
		 * Name of the scene to add the input to as a scene item
		 */
		sceneName: string;
		/**
		 * Name of the new input to created
		 */
		inputName: string;
		/**
		 * The kind of input to be created
		 */
		inputKind: string;
		/**
		 * Settings object to initialize the input with
		 *
		 * @defaultValue Default settings used
		 */
		inputSettings?: JsonObject;
		/**
		 * Whether to set the created scene item to enabled or disabled
		 *
		 * @defaultValue True
		 */
		sceneItemEnabled?: boolean;
	};
	RemoveInput: {
		/**
		 * Name of the input to remove
		 */
		inputName: string;
	};
	SetInputName: {
		/**
		 * Current input name
		 */
		inputName: string;
		/**
		 * New name for the input
		 */
		newInputName: string;
	};
	GetInputDefaultSettings: {
		/**
		 * Input kind to get the default settings for
		 */
		inputKind: string;
	};
	GetInputSettings: {
		/**
		 * Name of the input to get the settings of
		 */
		inputName: string;
	};
	SetInputSettings: {
		/**
		 * Name of the input to set the settings of
		 */
		inputName: string;
		/**
		 * Object of settings to apply
		 */
		inputSettings: JsonObject;
	};
	GetInputMute: {
		/**
		 * Name of input to get the mute state of
		 */
		inputName: string;
	};
	SetInputMute: {
		/**
		 * Name of the input to set the mute state of
		 */
		inputName: string;
		/**
		 * Whether to mute the input or not
		 */
		inputMuted: boolean;
	};
	ToggleInputMute: {
		/**
		 * Name of the input to toggle the mute state of
		 */
		inputName: string;
	};
	GetInputVolume: {
		/**
		 * Name of the input to get the volume of
		 */
		inputName: string;
	};
	SetInputVolume: {
		/**
		 * Name of the input to set the volume of
		 */
		inputName: string;
		/**
		 * Volume setting in mul
		 *
		 * @restrictions >= 0, <= 20
		 * @defaultValue `inputVolumeDb` should be specified
		 */
		inputVolumeMul?: number;
		/**
		 * Volume setting in dB
		 *
		 * @restrictions >= -100, <= -26
		 * @defaultValue `inputVolumeMul` should be specified
		 */
		inputVolumeDb?: number;
	};
	GetInputAudioSyncOffset: {
		/**
		 * Name of the input to get the audio sync offset of
		 */
		inputName: string;
	};
	SetInputAudioSyncOffset: {
		/**
		 * Name of the input to set the audio sync offset of
		 */
		inputName: string;
		/**
		 * New audio sync offset in milliseconds
		 *
		 * @restrictions >= -950, <= 20000
		 */
		inputAudioSyncOffset: number;
	};
	GetInputAudioMonitorType: {
		/**
		 * Name of the input to get the audio monitor type of
		 */
		inputName: string;
	};
	SetInputAudioMonitorType: {
		/**
		 * Name of the input to set the audio monitor type of
		 */
		inputName: string;
		/**
		 * Audio monitor type
		 */
		monitorType: string;
	};
	GetInputPropertiesListPropertyItems: {
		/**
		 * Name of the input
		 */
		inputName: string;
		/**
		 * Name of the list property to get the items of
		 */
		propertyName: string;
	};
	PressInputPropertiesButton: {
		/**
		 * Name of the input
		 */
		inputName: string;
		/**
		 * Name of the button property to press
		 */
		propertyName: string;
	};
	GetSceneList: undefined;
	GetCurrentProgramScene: undefined;
	SetCurrentProgramScene: {
		/**
		 * Scene to set as the current program scene
		 */
		sceneName: string;
	};
	GetCurrentPreviewScene: undefined;
	SetCurrentPreviewScene: {
		/**
		 * Scene to set as the current preview scene
		 */
		sceneName: string;
	};
	CreateScene: {
		/**
		 * Name for the new scene
		 */
		sceneName: string;
	};
	RemoveScene: {
		/**
		 * Name of the scene to remove
		 */
		sceneName: string;
	};
	SetSceneName: {
		/**
		 * Name of the scene to be renamed
		 */
		sceneName: string;
		/**
		 * New name for the scene
		 */
		newSceneName: string;
	};
	GetSourceActive: {
		/**
		 * Name of the source to get the active state of
		 */
		sourceName: string;
	};
	GetSourceScreenshot: {
		/**
		 * Name of the source to take a screenshot of
		 */
		sourceName: string;
		/**
		 * Image compression format to use. Use `GetVersion` to get compatible image formats
		 */
		imageFormat: string;
		/**
		 * Width to scale the screenshot to
		 *
		 * @restrictions >= 8, <= 4096
		 * @defaultValue Source value is used
		 */
		imageWidth?: number;
		/**
		 * Height to scale the screenshot to
		 *
		 * @restrictions >= 8, <= 4096
		 * @defaultValue Source value is used
		 */
		imageHeight?: number;
		/**
		 * Compression quality to use. 0 for high compression, 100 for uncompressed. -1 to use "default" (whatever that means, idk)
		 *
		 * @restrictions >= -1, <= 100
		 * @defaultValue -1
		 */
		imageCompressionQuality?: number;
	};
	SaveSourceScreenshot: {
		/**
		 * Name of the source to take a screenshot of
		 */
		sourceName: string;
		/**
		 * Image compression format to use. Use `GetVersion` to get compatible image formats
		 */
		imageFormat: string;
		/**
		 * Path to save the screenshot file to. Eg. `C:\Users\user\Desktop\screenshot.png`
		 */
		imageFilePath: string;
		/**
		 * Width to scale the screenshot to
		 *
		 * @restrictions >= 8, <= 4096
		 * @defaultValue Source value is used
		 */
		imageWidth?: number;
		/**
		 * Height to scale the screenshot to
		 *
		 * @restrictions >= 8, <= 4096
		 * @defaultValue Source value is used
		 */
		imageHeight?: number;
		/**
		 * Compression quality to use. 0 for high compression, 100 for uncompressed. -1 to use "default" (whatever that means, idk)
		 *
		 * @restrictions >= -1, <= 100
		 * @defaultValue -1
		 */
		imageCompressionQuality?: number;
	};
}

export interface OBSResponseTypes {
	GetPersistentData: {
		/**
		 * Value associated with the slot. `null` if not set
		 */
		slotValue: JsonValue;
	};
	SetPersistentData: undefined;
	GetSceneCollectionList: {
		/**
		 * The name of the current scene collection
		 */
		currentSceneCollectionName: string;
		/**
		 * Array of all available scene collections
		 */
		sceneCollections: string[];
	};
	SetCurrentSceneCollection: undefined;
	CreateSceneCollection: undefined;
	GetProfileList: {
		/**
		 * The name of the current profile
		 */
		currentProfileName: string;
		/**
		 * Array of all available profiles
		 */
		profiles: string[];
	};
	SetCurrentProfile: undefined;
	CreateProfile: undefined;
	RemoveProfile: undefined;
	GetProfileParameter: {
		/**
		 * Value associated with the parameter. `null` if not set and no default
		 */
		parameterValue: string;
		/**
		 * Default value associated with the parameter. `null` if no default
		 */
		defaultParameterValue: string;
	};
	SetProfileParameter: undefined;
	GetVideoSettings: {
		/**
		 * Numerator of the fractional FPS value
		 */
		fpsNumerator: number;
		/**
		 * Denominator of the fractional FPS value
		 */
		fpsDenominator: number;
		/**
		 * Width of the base (canvas) resolution in pixels
		 */
		baseWidth: number;
		/**
		 * Height of the base (canvas) resolution in pixels
		 */
		baseHeight: number;
		/**
		 * Width of the output resolution in pixels
		 */
		outputWidth: number;
		/**
		 * Height of the output resolution in pixels
		 */
		outputHeight: number;
	};
	SetVideoSettings: undefined;
	GetStreamServiceSettings: {
		/**
		 * Stream service type, like `rtmp_custom` or `rtmp_common`
		 */
		streamServiceType: string;
		/**
		 * Stream service settings
		 */
		streamServiceSettings: JsonObject;
	};
	SetStreamServiceSettings: undefined;
	GetVersion: {
		/**
		 * Current OBS Studio version
		 */
		obsVersion: string;
		/**
		 * Current obs-websocket version
		 */
		obsWebSocketVersion: string;
		/**
		 * Current latest obs-websocket RPC version
		 */
		rpcVersion: number;
		/**
		 * Array of available RPC requests for the currently negotiated RPC version
		 */
		availableRequests: string[];
		/**
		 * Image formats available in `GetSourceScreenshot` and `SaveSourceScreenshot` requests.
		 */
		supportedImageFormats: string[];
	};
	GetStats: {
		/**
		 * Current CPU usage in percent
		 */
		cpuUsage: number;
		/**
		 * Amount of memory in MB currently being used by OBS
		 */
		memoryUsage: number;
		/**
		 * Available disk space on the device being used for recording storage
		 */
		availableDiskSpace: number;
		/**
		 * Current FPS being rendered
		 */
		activeFps: number;
		/**
		 * Average time in milliseconds that OBS is taking to render a frame
		 */
		averageFrameRenderTime: number;
		/**
		 * Number of frames skipped by OBS in the render thread
		 */
		renderSkippedFrames: number;
		/**
		 * Total number of frames outputted by the render thread
		 */
		renderTotalFrames: number;
		/**
		 * Number of frames skipped by OBS in the output thread
		 */
		outputSkippedFrames: number;
		/**
		 * Total number of frames outputted by the output thread
		 */
		outputTotalFrames: number;
		/**
		 * Total number of messages received by obs-websocket from the client
		 */
		webSocketSessionIncomingMessages: number;
		/**
		 * Total number of messages sent by obs-websocket to the client
		 */
		webSocketSessionOutgoingMessages: number;
	};
	BroadcastCustomEvent: undefined;
	CallVendorRequest: {
		/**
		 * Object containing appropriate response data. {} if request does not provide any response data
		 */
		responseData: JsonObject;
	};
	GetHotkeyList: {
		/**
		 * Array of hotkey names
		 */
		hotkeys: string[];
	};
	TriggerHotkeyByName: undefined;
	TriggerHotkeyByKeySequence: undefined;
	GetStudioModeEnabled: {
		/**
		 * Whether studio mode is enabled
		 */
		studioModeEnabled: boolean;
	};
	SetStudioModeEnabled: undefined;
	Sleep: undefined;
	GetInputList: {
		/**
		 * Array of inputs
		 */
		inputs: JsonArray;
	};
	GetInputKindList: {
		/**
		 * Array of input kinds
		 */
		inputKinds: string[];
	};
	CreateInput: {
		/**
		 * ID of the newly created scene item
		 */
		sceneItemId: number;
	};
	RemoveInput: undefined;
	SetInputName: undefined;
	GetInputDefaultSettings: {
		/**
		 * Object of default settings for the input kind
		 */
		defaultInputSettings: JsonObject;
	};
	GetInputSettings: {
		/**
		 * Object of settings for the input
		 */
		inputSettings: JsonObject;
		/**
		 * The kind of the input
		 */
		inputKind: string;
	};
	SetInputSettings: undefined;
	GetInputMute: {
		/**
		 * Whether the input is muted
		 */
		inputMuted: boolean;
	};
	SetInputMute: undefined;
	ToggleInputMute: {
		/**
		 * Whether the input has been muted or unmuted
		 */
		inputMuted: boolean;
	};
	GetInputVolume: {
		/**
		 * Volume setting in mul
		 */
		inputVolumeMul: number;
		/**
		 * Volume setting in dB
		 */
		inputVolumeDb: number;
	};
	SetInputVolume: undefined;
	GetInputAudioSyncOffset: {
		/**
		 * Audio sync offset in milliseconds
		 */
		inputAudioSyncOffset: number;
	};
	SetInputAudioSyncOffset: undefined;
	GetInputAudioMonitorType: {
		/**
		 * Audio monitor type
		 */
		monitorType: string;
	};
	SetInputAudioMonitorType: undefined;
	GetInputPropertiesListPropertyItems: {
		/**
		 * Array of items in the list property
		 */
		propertyItems: JsonArray;
	};
	PressInputPropertiesButton: undefined;
	GetSceneList: {
		/**
		 * Array of scenes in OBS
		 */
		scenes: JsonArray;
		/**
		 * Current program scene
		 */
		currentProgramSceneName: string;
		/**
		 * Current preview scene. `null` if not in studio mode
		 */
		currentPreviewSceneName: string;
	};
	GetCurrentProgramScene: {
		/**
		 * Current program scene
		 */
		currentProgramSceneName: string;
	};
	SetCurrentProgramScene: undefined;
	GetCurrentPreviewScene: {
		/**
		 * Current preview scene
		 */
		currentPreviewSceneName: string;
	};
	SetCurrentPreviewScene: undefined;
	CreateScene: undefined;
	RemoveScene: undefined;
	SetSceneName: undefined;
	GetSourceActive: {
		/**
		 * Whether the source is showing in Program
		 */
		videoActive: boolean;
		/**
		 * Whether the source is showing in the UI (Preview, Projector, Properties)
		 */
		videoShowing: boolean;
	};
	GetSourceScreenshot: {
		/**
		 * Base64-encoded screenshot
		 */
		imageData: string;
	};
	SaveSourceScreenshot: {
		/**
		 * Base64-encoded screenshot
		 */
		imageData: string;
	};
}

// Overrides to improve typescript for requests without data and to provide documentation
declare module './base' {
	interface BaseOBSWebSocket {
		/**
		 * Gets the value of a "slot" from the selected persistent data realm.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'GetPersistentData', requestData: OBSRequestTypes['GetPersistentData']): Promise<OBSResponseTypes['GetPersistentData']>;
		/**
		 * Sets the value of a "slot" from the selected persistent data realm.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'SetPersistentData', requestData: OBSRequestTypes['SetPersistentData']): Promise<OBSResponseTypes['SetPersistentData']>;
		/**
		 * Gets an array of all scene collections
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'GetSceneCollectionList', requestData?: undefined): Promise<OBSResponseTypes['GetSceneCollectionList']>;
		/**
		 * Switches to a scene collection.
		 *
		 * Note: This will block until the collection has finished changing.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'SetCurrentSceneCollection', requestData: OBSRequestTypes['SetCurrentSceneCollection']): Promise<OBSResponseTypes['SetCurrentSceneCollection']>;
		/**
		 * Creates a new scene collection, switching to it in the process.
		 *
		 * Note: This will block until the collection has finished changing.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'CreateSceneCollection', requestData: OBSRequestTypes['CreateSceneCollection']): Promise<OBSResponseTypes['CreateSceneCollection']>;
		/**
		 * Gets an array of all profiles
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'GetProfileList', requestData?: undefined): Promise<OBSResponseTypes['GetProfileList']>;
		/**
		 * Switches to a profile.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'SetCurrentProfile', requestData: OBSRequestTypes['SetCurrentProfile']): Promise<OBSResponseTypes['SetCurrentProfile']>;
		/**
		 * Creates a new profile, switching to it in the process
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'CreateProfile', requestData: OBSRequestTypes['CreateProfile']): Promise<OBSResponseTypes['CreateProfile']>;
		/**
		 * Removes a profile. If the current profile is chosen, it will change to a different profile first.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'RemoveProfile', requestData: OBSRequestTypes['RemoveProfile']): Promise<OBSResponseTypes['RemoveProfile']>;
		/**
		 * Gets a parameter from the current profile's configuration.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'GetProfileParameter', requestData: OBSRequestTypes['GetProfileParameter']): Promise<OBSResponseTypes['GetProfileParameter']>;
		/**
		 * Sets the value of a parameter in the current profile's configuration.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'SetProfileParameter', requestData: OBSRequestTypes['SetProfileParameter']): Promise<OBSResponseTypes['SetProfileParameter']>;
		/**
		 * Gets the current video settings.
		 *
		 * Note: To get the true FPS value, divide the FPS numerator by the FPS denominator. Example: `60000/1001`
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'GetVideoSettings', requestData?: undefined): Promise<OBSResponseTypes['GetVideoSettings']>;
		/**
		 * Sets the current video settings.
		 *
		 * Note: Fields must be specified in pairs. For example, you cannot set only `baseWidth` without needing to specify `baseHeight`.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'SetVideoSettings', requestData: OBSRequestTypes['SetVideoSettings']): Promise<OBSResponseTypes['SetVideoSettings']>;
		/**
		 * Gets the current stream service settings (stream destination).
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 4
		 */
		call(requestType: 'GetStreamServiceSettings', requestData?: undefined): Promise<OBSResponseTypes['GetStreamServiceSettings']>;
		/**
		 * Sets the current stream service settings (stream destination).
		 *
		 * Note: Simple RTMP settings can be set with type `rtmp_custom` and the settings fields `server` and `key`.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 4
		 */
		call(requestType: 'SetStreamServiceSettings', requestData: OBSRequestTypes['SetStreamServiceSettings']): Promise<OBSResponseTypes['SetStreamServiceSettings']>;
		/**
		 * Gets data about the current plugin and RPC version.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'GetVersion', requestData?: undefined): Promise<OBSResponseTypes['GetVersion']>;
		/**
		 * Gets statistics about OBS, obs-websocket, and the current session.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'GetStats', requestData?: undefined): Promise<OBSResponseTypes['GetStats']>;
		/**
		 * Broadcasts a `CustomEvent` to all WebSocket clients. Receivers are clients which are identified and subscribed.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'BroadcastCustomEvent', requestData: OBSRequestTypes['BroadcastCustomEvent']): Promise<OBSResponseTypes['BroadcastCustomEvent']>;
		/**
		 * Call a request registered to a vendor.
		 *
		 * A vendor is a unique name registered by a third-party plugin or script, which allows for custom requests and events to be added to obs-websocket.
		 * If a plugin or script implements vendor requests or events, documentation is expected to be provided with them.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'CallVendorRequest', requestData: OBSRequestTypes['CallVendorRequest']): Promise<OBSResponseTypes['CallVendorRequest']>;
		/**
		 * Gets an array of all hotkey names in OBS
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'GetHotkeyList', requestData?: undefined): Promise<OBSResponseTypes['GetHotkeyList']>;
		/**
		 * Triggers a hotkey using its name. See `GetHotkeyList`
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'TriggerHotkeyByName', requestData: OBSRequestTypes['TriggerHotkeyByName']): Promise<OBSResponseTypes['TriggerHotkeyByName']>;
		/**
		 * Triggers a hotkey using a sequence of keys.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 4
		 */
		call(requestType: 'TriggerHotkeyByKeySequence', requestData: OBSRequestTypes['TriggerHotkeyByKeySequence']): Promise<OBSResponseTypes['TriggerHotkeyByKeySequence']>;
		/**
		 * Gets whether studio is enabled.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'GetStudioModeEnabled', requestData?: undefined): Promise<OBSResponseTypes['GetStudioModeEnabled']>;
		/**
		 * Enables or disables studio mode
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'SetStudioModeEnabled', requestData: OBSRequestTypes['SetStudioModeEnabled']): Promise<OBSResponseTypes['SetStudioModeEnabled']>;
		/**
		 * Sleeps for a time duration or number of frames. Only available in request batches with types `SERIAL_REALTIME` or `SERIAL_FRAME`.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'Sleep', requestData: OBSRequestTypes['Sleep']): Promise<OBSResponseTypes['Sleep']>;
		/**
		 * Gets an array of all inputs in OBS.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'GetInputList', requestData: OBSRequestTypes['GetInputList']): Promise<OBSResponseTypes['GetInputList']>;
		/**
		 * Gets an array of all available input kinds in OBS.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'GetInputKindList', requestData: OBSRequestTypes['GetInputKindList']): Promise<OBSResponseTypes['GetInputKindList']>;
		/**
		 * Creates a new input, adding it as a scene item to the specified scene.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'CreateInput', requestData: OBSRequestTypes['CreateInput']): Promise<OBSResponseTypes['CreateInput']>;
		/**
		 * Removes an existing input.
		 *
		 * Note: Will immediately remove all associated scene items.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'RemoveInput', requestData: OBSRequestTypes['RemoveInput']): Promise<OBSResponseTypes['RemoveInput']>;
		/**
		 * Sets the name of an input (rename).
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'SetInputName', requestData: OBSRequestTypes['SetInputName']): Promise<OBSResponseTypes['SetInputName']>;
		/**
		 * Gets the default settings for an input kind.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'GetInputDefaultSettings', requestData: OBSRequestTypes['GetInputDefaultSettings']): Promise<OBSResponseTypes['GetInputDefaultSettings']>;
		/**
		 * Gets the settings of an input.
		 *
		 * Note: Does not include defaults. To create the entire settings object, overlay `inputSettings` over the `defaultInputSettings` provided by `GetInputDefaultSettings`.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'GetInputSettings', requestData: OBSRequestTypes['GetInputSettings']): Promise<OBSResponseTypes['GetInputSettings']>;
		/**
		 * Sets the settings of an input.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'SetInputSettings', requestData: OBSRequestTypes['SetInputSettings']): Promise<OBSResponseTypes['SetInputSettings']>;
		/**
		 * Gets the audio mute state of an input.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'GetInputMute', requestData: OBSRequestTypes['GetInputMute']): Promise<OBSResponseTypes['GetInputMute']>;
		/**
		 * Sets the audio mute state of an input.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'SetInputMute', requestData: OBSRequestTypes['SetInputMute']): Promise<OBSResponseTypes['SetInputMute']>;
		/**
		 * Toggles the audio mute state of an input.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'ToggleInputMute', requestData: OBSRequestTypes['ToggleInputMute']): Promise<OBSResponseTypes['ToggleInputMute']>;
		/**
		 * Gets the current volume setting of an input.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'GetInputVolume', requestData: OBSRequestTypes['GetInputVolume']): Promise<OBSResponseTypes['GetInputVolume']>;
		/**
		 * Sets the volume setting of an input.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'SetInputVolume', requestData: OBSRequestTypes['SetInputVolume']): Promise<OBSResponseTypes['SetInputVolume']>;
		/**
		 * Gets the audio sync offset of an input.
		 *
		 * Note: The audio sync offset can be negative too!
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'GetInputAudioSyncOffset', requestData: OBSRequestTypes['GetInputAudioSyncOffset']): Promise<OBSResponseTypes['GetInputAudioSyncOffset']>;
		/**
		 * Sets the audio sync offset of an input.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'SetInputAudioSyncOffset', requestData: OBSRequestTypes['SetInputAudioSyncOffset']): Promise<OBSResponseTypes['SetInputAudioSyncOffset']>;
		/**
		 * Gets the audio monitor type of an input.
		 *
		 * The available audio monitor types are:
		 * - `OBS_MONITORING_TYPE_NONE`
		 * - `OBS_MONITORING_TYPE_MONITOR_ONLY`
		 * - `OBS_MONITORING_TYPE_MONITOR_AND_OUTPUT`
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'GetInputAudioMonitorType', requestData: OBSRequestTypes['GetInputAudioMonitorType']): Promise<OBSResponseTypes['GetInputAudioMonitorType']>;
		/**
		 * Sets the audio monitor type of an input.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'SetInputAudioMonitorType', requestData: OBSRequestTypes['SetInputAudioMonitorType']): Promise<OBSResponseTypes['SetInputAudioMonitorType']>;
		/**
		 * Gets the items of a list property from an input's properties.
		 *
		 * Note: Use this in cases where an input provides a dynamic, selectable list of items. For example, display capture, where it provides a list of available displays.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 4
		 */
		call(requestType: 'GetInputPropertiesListPropertyItems', requestData: OBSRequestTypes['GetInputPropertiesListPropertyItems']): Promise<OBSResponseTypes['GetInputPropertiesListPropertyItems']>;
		/**
		 * Presses a button in the properties of an input.
		 *
		 * Note: Use this in cases where there is a button in the properties of an input that cannot be accessed in any other way. For example, browser sources, where there is a refresh button.
		 *
		 * @category inputs
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 4
		 */
		call(requestType: 'PressInputPropertiesButton', requestData: OBSRequestTypes['PressInputPropertiesButton']): Promise<OBSResponseTypes['PressInputPropertiesButton']>;
		/**
		 * Gets an array of all scenes in OBS.
		 *
		 * @category scenes
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'GetSceneList', requestData?: undefined): Promise<OBSResponseTypes['GetSceneList']>;
		/**
		 * Gets the current program scene.
		 *
		 * @category scenes
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'GetCurrentProgramScene', requestData?: undefined): Promise<OBSResponseTypes['GetCurrentProgramScene']>;
		/**
		 * Sets the current program scene.
		 *
		 * @category scenes
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'SetCurrentProgramScene', requestData: OBSRequestTypes['SetCurrentProgramScene']): Promise<OBSResponseTypes['SetCurrentProgramScene']>;
		/**
		 * Gets the current preview scene.
		 *
		 * Only available when studio mode is enabled.
		 *
		 * @category scenes
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'GetCurrentPreviewScene', requestData?: undefined): Promise<OBSResponseTypes['GetCurrentPreviewScene']>;
		/**
		 * Sets the current preview scene.
		 *
		 * Only available when studio mode is enabled.
		 *
		 * @category scenes
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		call(requestType: 'SetCurrentPreviewScene', requestData: OBSRequestTypes['SetCurrentPreviewScene']): Promise<OBSResponseTypes['SetCurrentPreviewScene']>;
		/**
		 * Creates a new scene in OBS.
		 *
		 * @category scenes
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'CreateScene', requestData: OBSRequestTypes['CreateScene']): Promise<OBSResponseTypes['CreateScene']>;
		/**
		 * Removes a scene from OBS.
		 *
		 * @category scenes
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'RemoveScene', requestData: OBSRequestTypes['RemoveScene']): Promise<OBSResponseTypes['RemoveScene']>;
		/**
		 * Sets the name of a scene (rename).
		 *
		 * @category scenes
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'SetSceneName', requestData: OBSRequestTypes['SetSceneName']): Promise<OBSResponseTypes['SetSceneName']>;
		/**
		 * Gets the active and show state of a source.
		 *
		 * **Compatible with inputs and scenes.**
		 *
		 * @category sources
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 2
		 */
		call(requestType: 'GetSourceActive', requestData: OBSRequestTypes['GetSourceActive']): Promise<OBSResponseTypes['GetSourceActive']>;
		/**
		 * Gets a Base64-encoded screenshot of a source.
		 *
		 * The `imageWidth` and `imageHeight` parameters are treated as "scale to inner", meaning the smallest ratio will be used and the aspect ratio of the original resolution is kept.
		 * If `imageWidth` and `imageHeight` are not specified, the compressed image will use the full resolution of the source.
		 *
		 * **Compatible with inputs and scenes.**
		 *
		 * @category sources
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 4
		 */
		call(requestType: 'GetSourceScreenshot', requestData: OBSRequestTypes['GetSourceScreenshot']): Promise<OBSResponseTypes['GetSourceScreenshot']>;
		/**
		 * Saves a screenshot of a source to the filesystem.
		 *
		 * The `imageWidth` and `imageHeight` parameters are treated as "scale to inner", meaning the smallest ratio will be used and the aspect ratio of the original resolution is kept.
		 * If `imageWidth` and `imageHeight` are not specified, the compressed image will use the full resolution of the source.
		 *
		 * **Compatible with inputs and scenes.**
		 *
		 * @category sources
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		call(requestType: 'SaveSourceScreenshot', requestData: OBSRequestTypes['SaveSourceScreenshot']): Promise<OBSResponseTypes['SaveSourceScreenshot']>;
		/**
		 * The current scene collection has begun changing.
		 *
		 * Note: We recommend using this event to trigger a pause of all polling requests, as performing any requests during a
		 * scene collection change is considered undefined behavior and can cause crashes!
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		on(event: 'CurrentSceneCollectionChanging', listener: (data: OBSEventTypes['CurrentSceneCollectionChanging']) => void): this;
		/**
		 * The current scene collection has changed.
		 *
		 * Note: If polling has been paused during `CurrentSceneCollectionChanging`, this is the que to restart polling.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		on(event: 'CurrentSceneCollectionChanged', listener: (data: OBSEventTypes['CurrentSceneCollectionChanged']) => void): this;
		/**
		 * The scene collection list has changed.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		on(event: 'SceneCollectionListChanged', listener: (data: OBSEventTypes['SceneCollectionListChanged']) => void): this;
		/**
		 * The current profile has begun changing.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		on(event: 'CurrentProfileChanging', listener: (data: OBSEventTypes['CurrentProfileChanging']) => void): this;
		/**
		 * The current profile has changed.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		on(event: 'CurrentProfileChanged', listener: (data: OBSEventTypes['CurrentProfileChanged']) => void): this;
		/**
		 * The profile list has changed.
		 *
		 * @category config
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		on(event: 'ProfileListChanged', listener: (data: OBSEventTypes['ProfileListChanged']) => void): this;
		/**
		 * OBS has begun the shutdown process.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		on(event: 'ExitStarted', listener: (data: OBSEventTypes['ExitStarted']) => void): this;
		/**
		 * Studio mode has been enabled or disabled.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 1
		 */
		on(event: 'StudioModeStateChanged', listener: (data: OBSEventTypes['StudioModeStateChanged']) => void): this;
		/**
		 * An event has been emitted from a vendor.
		 *
		 * A vendor is a unique name registered by a third-party plugin or script, which allows for custom requests and events to be added to obs-websocket.
		 * If a plugin or script implements vendor requests or events, documentation is expected to be provided with them.
		 *
		 * @category general
		 * @initialVersion 5.0.0
		 * @rpcVersion 1
		 * @complexity 3
		 */
		on(event: 'VendorEvent', listener: (data: OBSEventTypes['VendorEvent']) => void): this;
	}
}
